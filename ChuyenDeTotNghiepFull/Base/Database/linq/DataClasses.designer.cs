#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChuyenDeTotNghiepFull.Base.Database.linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="myDataBase")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertBillExport(BillExport instance);
    partial void UpdateBillExport(BillExport instance);
    partial void DeleteBillExport(BillExport instance);
    partial void InsertSupplie(Supplie instance);
    partial void UpdateSupplie(Supplie instance);
    partial void DeleteSupplie(Supplie instance);
    partial void InsertBillImport(BillImport instance);
    partial void UpdateBillImport(BillImport instance);
    partial void DeleteBillImport(BillImport instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertDetailBillExport(DetailBillExport instance);
    partial void UpdateDetailBillExport(DetailBillExport instance);
    partial void DeleteDetailBillExport(DetailBillExport instance);
    partial void InsertDetailBillImport(DetailBillImport instance);
    partial void UpdateDetailBillImport(DetailBillImport instance);
    partial void DeleteDetailBillImport(DetailBillImport instance);
    partial void InsertDetailOrder(DetailOrder instance);
    partial void UpdateDetailOrder(DetailOrder instance);
    partial void DeleteDetailOrder(DetailOrder instance);
    partial void InsertOrderIO(OrderIO instance);
    partial void UpdateOrderIO(OrderIO instance);
    partial void DeleteOrderIO(OrderIO instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStaffPosition(StaffPosition instance);
    partial void UpdateStaffPosition(StaffPosition instance);
    partial void DeleteStaffPosition(StaffPosition instance);
    partial void InsertStall(Stall instance);
    partial void UpdateStall(Stall instance);
    partial void DeleteStall(Stall instance);
    partial void InsertStorage(Storage instance);
    partial void UpdateStorage(Storage instance);
    partial void DeleteStorage(Storage instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::ChuyenDeTotNghiepFull.Properties.Settings.Default.myDataBaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<BillExport> BillExports
		{
			get
			{
				return this.GetTable<BillExport>();
			}
		}
		
		public System.Data.Linq.Table<Supplie> Supplies
		{
			get
			{
				return this.GetTable<Supplie>();
			}
		}
		
		public System.Data.Linq.Table<BillImport> BillImports
		{
			get
			{
				return this.GetTable<BillImport>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<DetailBillExport> DetailBillExports
		{
			get
			{
				return this.GetTable<DetailBillExport>();
			}
		}
		
		public System.Data.Linq.Table<DetailBillImport> DetailBillImports
		{
			get
			{
				return this.GetTable<DetailBillImport>();
			}
		}
		
		public System.Data.Linq.Table<DetailOrder> DetailOrders
		{
			get
			{
				return this.GetTable<DetailOrder>();
			}
		}
		
		public System.Data.Linq.Table<OrderIO> OrderIOs
		{
			get
			{
				return this.GetTable<OrderIO>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StaffPosition> StaffPositions
		{
			get
			{
				return this.GetTable<StaffPosition>();
			}
		}
		
		public System.Data.Linq.Table<Stall> Stalls
		{
			get
			{
				return this.GetTable<Stall>();
			}
		}
		
		public System.Data.Linq.Table<Storage> Storages
		{
			get
			{
				return this.GetTable<Storage>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _password;
		
		private int _id;
		
		private int _id_Staff;
		
		private string _username;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_StaffChanging(int value);
    partial void Onid_StaffChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    #endregion
		
		public Account()
		{
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Staff", DbType="Int NOT NULL")]
		public int id_Staff
		{
			get
			{
				return this._id_Staff;
			}
			set
			{
				if ((this._id_Staff != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_StaffChanging(value);
					this.SendPropertyChanging();
					this._id_Staff = value;
					this.SendPropertyChanged("id_Staff");
					this.Onid_StaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Account", Storage="_Staff", ThisKey="id_Staff", OtherKey="id", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._id_Staff = value.id;
					}
					else
					{
						this._id_Staff = default(int);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillExport")]
	public partial class BillExport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_staff;
		
		private int _id_customer;
		
		private int _id_room;
		
		private System.DateTime _date;
		
		private int _id;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Room> _Room;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_staffChanging(int value);
    partial void Onid_staffChanged();
    partial void Onid_customerChanging(int value);
    partial void Onid_customerChanged();
    partial void Onid_roomChanging(int value);
    partial void Onid_roomChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public BillExport()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Room = default(EntityRef<Room>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_staff", DbType="Int NOT NULL")]
		public int id_staff
		{
			get
			{
				return this._id_staff;
			}
			set
			{
				if ((this._id_staff != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_staffChanging(value);
					this.SendPropertyChanging();
					this._id_staff = value;
					this.SendPropertyChanged("id_staff");
					this.Onid_staffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_customer", DbType="Int NOT NULL")]
		public int id_customer
		{
			get
			{
				return this._id_customer;
			}
			set
			{
				if ((this._id_customer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_customerChanging(value);
					this.SendPropertyChanging();
					this._id_customer = value;
					this.SendPropertyChanged("id_customer");
					this.Onid_customerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_room", DbType="Int NOT NULL")]
		public int id_room
		{
			get
			{
				return this._id_room;
			}
			set
			{
				if ((this._id_room != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_roomChanging(value);
					this.SendPropertyChanging();
					this._id_room = value;
					this.SendPropertyChanged("id_room");
					this.Onid_roomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_BillExport", Storage="_Customer", ThisKey="id_customer", OtherKey="id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.BillExports.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.BillExports.Add(this);
						this._id_customer = value.id;
					}
					else
					{
						this._id_customer = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_BillExport", Storage="_Room", ThisKey="id_room", OtherKey="id", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.BillExports.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.BillExports.Add(this);
						this._id_room = value.id;
					}
					else
					{
						this._id_room = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_BillExport", Storage="_Staff", ThisKey="id_staff", OtherKey="id", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.BillExports.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.BillExports.Add(this);
						this._id_staff = value.id;
					}
					else
					{
						this._id_staff = default(int);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplie")]
	public partial class Supplie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private string _address;
		
		private int _phoneNumber;
		
		private int _id;
		
		private EntitySet<BillImport> _BillImports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneNumberChanging(int value);
    partial void OnphoneNumberChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Supplie()
		{
			this._BillImports = new EntitySet<BillImport>(new Action<BillImport>(this.attach_BillImports), new Action<BillImport>(this.detach_BillImports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="Int NOT NULL")]
		public int phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplie_BillImport", Storage="_BillImports", ThisKey="id", OtherKey="id_customer")]
		public EntitySet<BillImport> BillImports
		{
			get
			{
				return this._BillImports;
			}
			set
			{
				this._BillImports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillImports(BillImport entity)
		{
			this.SendPropertyChanging();
			entity.Supplie = this;
		}
		
		private void detach_BillImports(BillImport entity)
		{
			this.SendPropertyChanging();
			entity.Supplie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillImport")]
	public partial class BillImport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_staff;
		
		private int _id_customer;
		
		private System.DateTime _date;
		
		private int _id;
		
		private EntitySet<DetailBillImport> _DetailBillImports;
		
		private EntityRef<Supplie> _Supplie;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_staffChanging(int value);
    partial void Onid_staffChanged();
    partial void Onid_customerChanging(int value);
    partial void Onid_customerChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public BillImport()
		{
			this._DetailBillImports = new EntitySet<DetailBillImport>(new Action<DetailBillImport>(this.attach_DetailBillImports), new Action<DetailBillImport>(this.detach_DetailBillImports));
			this._Supplie = default(EntityRef<Supplie>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_staff", DbType="Int NOT NULL")]
		public int id_staff
		{
			get
			{
				return this._id_staff;
			}
			set
			{
				if ((this._id_staff != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_staffChanging(value);
					this.SendPropertyChanging();
					this._id_staff = value;
					this.SendPropertyChanged("id_staff");
					this.Onid_staffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_customer", DbType="Int NOT NULL")]
		public int id_customer
		{
			get
			{
				return this._id_customer;
			}
			set
			{
				if ((this._id_customer != value))
				{
					if (this._Supplie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_customerChanging(value);
					this.SendPropertyChanging();
					this._id_customer = value;
					this.SendPropertyChanged("id_customer");
					this.Onid_customerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BillImport_DetailBillImport", Storage="_DetailBillImports", ThisKey="id", OtherKey="id_bill")]
		public EntitySet<DetailBillImport> DetailBillImports
		{
			get
			{
				return this._DetailBillImports;
			}
			set
			{
				this._DetailBillImports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplie_BillImport", Storage="_Supplie", ThisKey="id_customer", OtherKey="id", IsForeignKey=true)]
		public Supplie Supplie
		{
			get
			{
				return this._Supplie.Entity;
			}
			set
			{
				Supplie previousValue = this._Supplie.Entity;
				if (((previousValue != value) 
							|| (this._Supplie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplie.Entity = null;
						previousValue.BillImports.Remove(this);
					}
					this._Supplie.Entity = value;
					if ((value != null))
					{
						value.BillImports.Add(this);
						this._id_customer = value.id;
					}
					else
					{
						this._id_customer = default(int);
					}
					this.SendPropertyChanged("Supplie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_BillImport", Storage="_Staff", ThisKey="id_staff", OtherKey="id", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.BillImports.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.BillImports.Add(this);
						this._id_staff = value.id;
					}
					else
					{
						this._id_staff = default(int);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailBillImports(DetailBillImport entity)
		{
			this.SendPropertyChanging();
			entity.BillImport = this;
		}
		
		private void detach_DetailBillImports(DetailBillImport entity)
		{
			this.SendPropertyChanging();
			entity.BillImport = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private string _sex;
		
		private System.DateTime _dateOfBirth;
		
		private int _phoneNumber;
		
		private int _id;
		
		private EntitySet<BillExport> _BillExports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsexChanging(string value);
    partial void OnsexChanged();
    partial void OndateOfBirthChanging(System.DateTime value);
    partial void OndateOfBirthChanged();
    partial void OnphoneNumberChanging(int value);
    partial void OnphoneNumberChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Customer()
		{
			this._BillExports = new EntitySet<BillExport>(new Action<BillExport>(this.attach_BillExports), new Action<BillExport>(this.detach_BillExports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sex", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string sex
		{
			get
			{
				return this._sex;
			}
			set
			{
				if ((this._sex != value))
				{
					this.OnsexChanging(value);
					this.SendPropertyChanging();
					this._sex = value;
					this.SendPropertyChanged("sex");
					this.OnsexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime dateOfBirth
		{
			get
			{
				return this._dateOfBirth;
			}
			set
			{
				if ((this._dateOfBirth != value))
				{
					this.OndateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirth = value;
					this.SendPropertyChanged("dateOfBirth");
					this.OndateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="Int NOT NULL")]
		public int phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_BillExport", Storage="_BillExports", ThisKey="id", OtherKey="id_customer")]
		public EntitySet<BillExport> BillExports
		{
			get
			{
				return this._BillExports;
			}
			set
			{
				this._BillExports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillExports(BillExport entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_BillExports(BillExport entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailBillExport")]
	public partial class DetailBillExport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_product_stalls;
		
		private int _amount;
		
		private int _id;
		
		private int _id_Bill;
		
		private EntitySet<Stall> _Stalls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_product_stallsChanging(int value);
    partial void Onid_product_stallsChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_BillChanging(int value);
    partial void Onid_BillChanged();
    #endregion
		
		public DetailBillExport()
		{
			this._Stalls = new EntitySet<Stall>(new Action<Stall>(this.attach_Stalls), new Action<Stall>(this.detach_Stalls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_product_stalls", DbType="Int NOT NULL")]
		public int id_product_stalls
		{
			get
			{
				return this._id_product_stalls;
			}
			set
			{
				if ((this._id_product_stalls != value))
				{
					this.Onid_product_stallsChanging(value);
					this.SendPropertyChanging();
					this._id_product_stalls = value;
					this.SendPropertyChanged("id_product_stalls");
					this.Onid_product_stallsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Bill", DbType="Int NOT NULL")]
		public int id_Bill
		{
			get
			{
				return this._id_Bill;
			}
			set
			{
				if ((this._id_Bill != value))
				{
					this.Onid_BillChanging(value);
					this.SendPropertyChanging();
					this._id_Bill = value;
					this.SendPropertyChanged("id_Bill");
					this.Onid_BillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DetailBillExport_Stall", Storage="_Stalls", ThisKey="id", OtherKey="id_services")]
		public EntitySet<Stall> Stalls
		{
			get
			{
				return this._Stalls;
			}
			set
			{
				this._Stalls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stalls(Stall entity)
		{
			this.SendPropertyChanging();
			entity.DetailBillExport = this;
		}
		
		private void detach_Stalls(Stall entity)
		{
			this.SendPropertyChanging();
			entity.DetailBillExport = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailBillImport")]
	public partial class DetailBillImport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_product;
		
		private int _id_bill;
		
		private int _amount;
		
		private int _id;
		
		private EntityRef<BillImport> _BillImport;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_productChanging(int value);
    partial void Onid_productChanged();
    partial void Onid_billChanging(int value);
    partial void Onid_billChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public DetailBillImport()
		{
			this._BillImport = default(EntityRef<BillImport>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_product", DbType="Int NOT NULL")]
		public int id_product
		{
			get
			{
				return this._id_product;
			}
			set
			{
				if ((this._id_product != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_productChanging(value);
					this.SendPropertyChanging();
					this._id_product = value;
					this.SendPropertyChanged("id_product");
					this.Onid_productChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_bill", DbType="Int NOT NULL")]
		public int id_bill
		{
			get
			{
				return this._id_bill;
			}
			set
			{
				if ((this._id_bill != value))
				{
					if (this._BillImport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_billChanging(value);
					this.SendPropertyChanging();
					this._id_bill = value;
					this.SendPropertyChanged("id_bill");
					this.Onid_billChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BillImport_DetailBillImport", Storage="_BillImport", ThisKey="id_bill", OtherKey="id", IsForeignKey=true)]
		public BillImport BillImport
		{
			get
			{
				return this._BillImport.Entity;
			}
			set
			{
				BillImport previousValue = this._BillImport.Entity;
				if (((previousValue != value) 
							|| (this._BillImport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillImport.Entity = null;
						previousValue.DetailBillImports.Remove(this);
					}
					this._BillImport.Entity = value;
					if ((value != null))
					{
						value.DetailBillImports.Add(this);
						this._id_bill = value.id;
					}
					else
					{
						this._id_bill = default(int);
					}
					this.SendPropertyChanged("BillImport");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DetailBillImport", Storage="_Product", ThisKey="id_product", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.DetailBillImports.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.DetailBillImports.Add(this);
						this._id_product = value.id;
					}
					else
					{
						this._id_product = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailOrder")]
	public partial class DetailOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_product;
		
		private int _amount;
		
		private int _id;
		
		private int _id_Order;
		
		private EntityRef<OrderIO> _OrderIO;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_productChanging(int value);
    partial void Onid_productChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_OrderChanging(int value);
    partial void Onid_OrderChanged();
    #endregion
		
		public DetailOrder()
		{
			this._OrderIO = default(EntityRef<OrderIO>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_product", DbType="Int NOT NULL")]
		public int id_product
		{
			get
			{
				return this._id_product;
			}
			set
			{
				if ((this._id_product != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_productChanging(value);
					this.SendPropertyChanging();
					this._id_product = value;
					this.SendPropertyChanged("id_product");
					this.Onid_productChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Order", DbType="Int NOT NULL")]
		public int id_Order
		{
			get
			{
				return this._id_Order;
			}
			set
			{
				if ((this._id_Order != value))
				{
					if (this._OrderIO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_OrderChanging(value);
					this.SendPropertyChanging();
					this._id_Order = value;
					this.SendPropertyChanged("id_Order");
					this.Onid_OrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderIO_DetailOrder", Storage="_OrderIO", ThisKey="id_Order", OtherKey="id", IsForeignKey=true)]
		public OrderIO OrderIO
		{
			get
			{
				return this._OrderIO.Entity;
			}
			set
			{
				OrderIO previousValue = this._OrderIO.Entity;
				if (((previousValue != value) 
							|| (this._OrderIO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderIO.Entity = null;
						previousValue.DetailOrders.Remove(this);
					}
					this._OrderIO.Entity = value;
					if ((value != null))
					{
						value.DetailOrders.Add(this);
						this._id_Order = value.id;
					}
					else
					{
						this._id_Order = default(int);
					}
					this.SendPropertyChanged("OrderIO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DetailOrder", Storage="_Product", ThisKey="id_product", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.DetailOrders.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.DetailOrders.Add(this);
						this._id_product = value.id;
					}
					else
					{
						this._id_product = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderIO")]
	public partial class OrderIO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_staff;
		
		private int _id_manager;
		
		private System.DateTime _date;
		
		private int _id;
		
		private EntitySet<DetailOrder> _DetailOrders;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Staff> _Staff1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_staffChanging(int value);
    partial void Onid_staffChanged();
    partial void Onid_managerChanging(int value);
    partial void Onid_managerChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public OrderIO()
		{
			this._DetailOrders = new EntitySet<DetailOrder>(new Action<DetailOrder>(this.attach_DetailOrders), new Action<DetailOrder>(this.detach_DetailOrders));
			this._Staff = default(EntityRef<Staff>);
			this._Staff1 = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_staff", DbType="Int NOT NULL")]
		public int id_staff
		{
			get
			{
				return this._id_staff;
			}
			set
			{
				if ((this._id_staff != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_staffChanging(value);
					this.SendPropertyChanging();
					this._id_staff = value;
					this.SendPropertyChanged("id_staff");
					this.Onid_staffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_manager", DbType="Int NOT NULL")]
		public int id_manager
		{
			get
			{
				return this._id_manager;
			}
			set
			{
				if ((this._id_manager != value))
				{
					if (this._Staff1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_managerChanging(value);
					this.SendPropertyChanging();
					this._id_manager = value;
					this.SendPropertyChanged("id_manager");
					this.Onid_managerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderIO_DetailOrder", Storage="_DetailOrders", ThisKey="id", OtherKey="id_Order")]
		public EntitySet<DetailOrder> DetailOrders
		{
			get
			{
				return this._DetailOrders;
			}
			set
			{
				this._DetailOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_OrderIO", Storage="_Staff", ThisKey="id_staff", OtherKey="id", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.OrderIOs.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.OrderIOs.Add(this);
						this._id_staff = value.id;
					}
					else
					{
						this._id_staff = default(int);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_OrderIO1", Storage="_Staff1", ThisKey="id_manager", OtherKey="id", IsForeignKey=true)]
		public Staff Staff1
		{
			get
			{
				return this._Staff1.Entity;
			}
			set
			{
				Staff previousValue = this._Staff1.Entity;
				if (((previousValue != value) 
							|| (this._Staff1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff1.Entity = null;
						previousValue.OrderIOs1.Remove(this);
					}
					this._Staff1.Entity = value;
					if ((value != null))
					{
						value.OrderIOs1.Add(this);
						this._id_manager = value.id;
					}
					else
					{
						this._id_manager = default(int);
					}
					this.SendPropertyChanged("Staff1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailOrders(DetailOrder entity)
		{
			this.SendPropertyChanging();
			entity.OrderIO = this;
		}
		
		private void detach_DetailOrders(DetailOrder entity)
		{
			this.SendPropertyChanging();
			entity.OrderIO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private long _salary;
		
		private string _description;
		
		private int _id;
		
		private EntitySet<StaffPosition> _StaffPositions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsalaryChanging(long value);
    partial void OnsalaryChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Position()
		{
			this._StaffPositions = new EntitySet<StaffPosition>(new Action<StaffPosition>(this.attach_StaffPositions), new Action<StaffPosition>(this.detach_StaffPositions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="BigInt NOT NULL")]
		public long salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_StaffPosition", Storage="_StaffPositions", ThisKey="id", OtherKey="id_position")]
		public EntitySet<StaffPosition> StaffPositions
		{
			get
			{
				return this._StaffPositions;
			}
			set
			{
				this._StaffPositions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StaffPositions(StaffPosition entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_StaffPositions(StaffPosition entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private System.DateTime _dateOfManufacture;
		
		private System.DateTime _expirationDate;
		
		private int _id;
		
		private EntitySet<DetailBillImport> _DetailBillImports;
		
		private EntitySet<DetailOrder> _DetailOrders;
		
		private EntitySet<Stall> _Stalls;
		
		private EntityRef<Storage> _Storage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndateOfManufactureChanging(System.DateTime value);
    partial void OndateOfManufactureChanged();
    partial void OnexpirationDateChanging(System.DateTime value);
    partial void OnexpirationDateChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Product()
		{
			this._DetailBillImports = new EntitySet<DetailBillImport>(new Action<DetailBillImport>(this.attach_DetailBillImports), new Action<DetailBillImport>(this.detach_DetailBillImports));
			this._DetailOrders = new EntitySet<DetailOrder>(new Action<DetailOrder>(this.attach_DetailOrders), new Action<DetailOrder>(this.detach_DetailOrders));
			this._Stalls = new EntitySet<Stall>(new Action<Stall>(this.attach_Stalls), new Action<Stall>(this.detach_Stalls));
			this._Storage = default(EntityRef<Storage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfManufacture", DbType="Date NOT NULL")]
		public System.DateTime dateOfManufacture
		{
			get
			{
				return this._dateOfManufacture;
			}
			set
			{
				if ((this._dateOfManufacture != value))
				{
					this.OndateOfManufactureChanging(value);
					this.SendPropertyChanging();
					this._dateOfManufacture = value;
					this.SendPropertyChanged("dateOfManufacture");
					this.OndateOfManufactureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expirationDate", DbType="Date NOT NULL")]
		public System.DateTime expirationDate
		{
			get
			{
				return this._expirationDate;
			}
			set
			{
				if ((this._expirationDate != value))
				{
					this.OnexpirationDateChanging(value);
					this.SendPropertyChanging();
					this._expirationDate = value;
					this.SendPropertyChanged("expirationDate");
					this.OnexpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DetailBillImport", Storage="_DetailBillImports", ThisKey="id", OtherKey="id_product")]
		public EntitySet<DetailBillImport> DetailBillImports
		{
			get
			{
				return this._DetailBillImports;
			}
			set
			{
				this._DetailBillImports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DetailOrder", Storage="_DetailOrders", ThisKey="id", OtherKey="id_product")]
		public EntitySet<DetailOrder> DetailOrders
		{
			get
			{
				return this._DetailOrders;
			}
			set
			{
				this._DetailOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Stall", Storage="_Stalls", ThisKey="id", OtherKey="id_services")]
		public EntitySet<Stall> Stalls
		{
			get
			{
				return this._Stalls;
			}
			set
			{
				this._Stalls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Storage", Storage="_Storage", ThisKey="id", OtherKey="id_product", IsUnique=true, IsForeignKey=false)]
		public Storage Storage
		{
			get
			{
				return this._Storage.Entity;
			}
			set
			{
				Storage previousValue = this._Storage.Entity;
				if (((previousValue != value) 
							|| (this._Storage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Storage.Entity = null;
						previousValue.Product = null;
					}
					this._Storage.Entity = value;
					if ((value != null))
					{
						value.Product = this;
					}
					this.SendPropertyChanged("Storage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailBillImports(DetailBillImport entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_DetailBillImports(DetailBillImport entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_DetailOrders(DetailOrder entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_DetailOrders(DetailOrder entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Stalls(Stall entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Stalls(Stall entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _status;
		
		private int _id;
		
		private EntitySet<BillExport> _BillExports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Room()
		{
			this._BillExports = new EntitySet<BillExport>(new Action<BillExport>(this.attach_BillExports), new Action<BillExport>(this.detach_BillExports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_BillExport", Storage="_BillExports", ThisKey="id", OtherKey="id_room")]
		public EntitySet<BillExport> BillExports
		{
			get
			{
				return this._BillExports;
			}
			set
			{
				this._BillExports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillExports(BillExport entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_BillExports(BillExport entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private long _price;
		
		private string _description;
		
		private int _id;
		
		private EntitySet<Stall> _Stalls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpriceChanging(long value);
    partial void OnpriceChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Service()
		{
			this._Stalls = new EntitySet<Stall>(new Action<Stall>(this.attach_Stalls), new Action<Stall>(this.detach_Stalls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="BigInt NOT NULL")]
		public long price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Stall", Storage="_Stalls", ThisKey="id", OtherKey="id_services")]
		public EntitySet<Stall> Stalls
		{
			get
			{
				return this._Stalls;
			}
			set
			{
				this._Stalls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stalls(Stall entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Stalls(Stall entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private string _sex;
		
		private System.DateTime _dateOfBirth;
		
		private string _address;
		
		private int _identityNumber;
		
		private int _phoneNumber;
		
		private string _status;
		
		private string _note;
		
		private int _id;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<BillExport> _BillExports;
		
		private EntitySet<BillImport> _BillImports;
		
		private EntitySet<OrderIO> _OrderIOs;
		
		private EntitySet<OrderIO> _OrderIOs1;
		
		private EntityRef<StaffPosition> _StaffPosition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsexChanging(string value);
    partial void OnsexChanged();
    partial void OndateOfBirthChanging(System.DateTime value);
    partial void OndateOfBirthChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnidentityNumberChanging(int value);
    partial void OnidentityNumberChanged();
    partial void OnphoneNumberChanging(int value);
    partial void OnphoneNumberChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Staff()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._BillExports = new EntitySet<BillExport>(new Action<BillExport>(this.attach_BillExports), new Action<BillExport>(this.detach_BillExports));
			this._BillImports = new EntitySet<BillImport>(new Action<BillImport>(this.attach_BillImports), new Action<BillImport>(this.detach_BillImports));
			this._OrderIOs = new EntitySet<OrderIO>(new Action<OrderIO>(this.attach_OrderIOs), new Action<OrderIO>(this.detach_OrderIOs));
			this._OrderIOs1 = new EntitySet<OrderIO>(new Action<OrderIO>(this.attach_OrderIOs1), new Action<OrderIO>(this.detach_OrderIOs1));
			this._StaffPosition = default(EntityRef<StaffPosition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sex", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string sex
		{
			get
			{
				return this._sex;
			}
			set
			{
				if ((this._sex != value))
				{
					this.OnsexChanging(value);
					this.SendPropertyChanging();
					this._sex = value;
					this.SendPropertyChanged("sex");
					this.OnsexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime dateOfBirth
		{
			get
			{
				return this._dateOfBirth;
			}
			set
			{
				if ((this._dateOfBirth != value))
				{
					this.OndateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirth = value;
					this.SendPropertyChanged("dateOfBirth");
					this.OndateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_identityNumber", DbType="Int NOT NULL")]
		public int identityNumber
		{
			get
			{
				return this._identityNumber;
			}
			set
			{
				if ((this._identityNumber != value))
				{
					this.OnidentityNumberChanging(value);
					this.SendPropertyChanging();
					this._identityNumber = value;
					this.SendPropertyChanged("identityNumber");
					this.OnidentityNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="Int NOT NULL")]
		public int phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Account", Storage="_Accounts", ThisKey="id", OtherKey="id_Staff")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_BillExport", Storage="_BillExports", ThisKey="id", OtherKey="id_staff")]
		public EntitySet<BillExport> BillExports
		{
			get
			{
				return this._BillExports;
			}
			set
			{
				this._BillExports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_BillImport", Storage="_BillImports", ThisKey="id", OtherKey="id_staff")]
		public EntitySet<BillImport> BillImports
		{
			get
			{
				return this._BillImports;
			}
			set
			{
				this._BillImports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_OrderIO", Storage="_OrderIOs", ThisKey="id", OtherKey="id_staff")]
		public EntitySet<OrderIO> OrderIOs
		{
			get
			{
				return this._OrderIOs;
			}
			set
			{
				this._OrderIOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_OrderIO1", Storage="_OrderIOs1", ThisKey="id", OtherKey="id_manager")]
		public EntitySet<OrderIO> OrderIOs1
		{
			get
			{
				return this._OrderIOs1;
			}
			set
			{
				this._OrderIOs1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_StaffPosition", Storage="_StaffPosition", ThisKey="id", OtherKey="id_staff", IsUnique=true, IsForeignKey=false)]
		public StaffPosition StaffPosition
		{
			get
			{
				return this._StaffPosition.Entity;
			}
			set
			{
				StaffPosition previousValue = this._StaffPosition.Entity;
				if (((previousValue != value) 
							|| (this._StaffPosition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffPosition.Entity = null;
						previousValue.Staff = null;
					}
					this._StaffPosition.Entity = value;
					if ((value != null))
					{
						value.Staff = this;
					}
					this.SendPropertyChanged("StaffPosition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_BillExports(BillExport entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_BillExports(BillExport entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_BillImports(BillImport entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_BillImports(BillImport entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_OrderIOs(OrderIO entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_OrderIOs(OrderIO entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_OrderIOs1(OrderIO entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = this;
		}
		
		private void detach_OrderIOs1(OrderIO entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffPosition")]
	public partial class StaffPosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_staff;
		
		private int _id_position;
		
		private System.DateTime _date;
		
		private EntityRef<Position> _Position;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_staffChanging(int value);
    partial void Onid_staffChanged();
    partial void Onid_positionChanging(int value);
    partial void Onid_positionChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
		
		public StaffPosition()
		{
			this._Position = default(EntityRef<Position>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_staff", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_staff
		{
			get
			{
				return this._id_staff;
			}
			set
			{
				if ((this._id_staff != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_staffChanging(value);
					this.SendPropertyChanging();
					this._id_staff = value;
					this.SendPropertyChanged("id_staff");
					this.Onid_staffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_position", DbType="Int NOT NULL")]
		public int id_position
		{
			get
			{
				return this._id_position;
			}
			set
			{
				if ((this._id_position != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_positionChanging(value);
					this.SendPropertyChanging();
					this._id_position = value;
					this.SendPropertyChanged("id_position");
					this.Onid_positionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_StaffPosition", Storage="_Position", ThisKey="id_position", OtherKey="id", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.StaffPositions.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.StaffPositions.Add(this);
						this._id_position = value.id;
					}
					else
					{
						this._id_position = default(int);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_StaffPosition", Storage="_Staff", ThisKey="id_staff", OtherKey="id", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.StaffPosition = null;
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.StaffPosition = this;
						this._id_staff = value.id;
					}
					else
					{
						this._id_staff = default(int);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stalls")]
	public partial class Stall : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_services;
		
		private long _price;
		
		private string _description;
		
		private int _id;
		
		private EntityRef<DetailBillExport> _DetailBillExport;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_servicesChanging(int value);
    partial void Onid_servicesChanged();
    partial void OnpriceChanging(long value);
    partial void OnpriceChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Stall()
		{
			this._DetailBillExport = default(EntityRef<DetailBillExport>);
			this._Product = default(EntityRef<Product>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_services", DbType="Int NOT NULL")]
		public int id_services
		{
			get
			{
				return this._id_services;
			}
			set
			{
				if ((this._id_services != value))
				{
					if (((this._DetailBillExport.HasLoadedOrAssignedValue || this._Product.HasLoadedOrAssignedValue) 
								|| this._Service.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_servicesChanging(value);
					this.SendPropertyChanging();
					this._id_services = value;
					this.SendPropertyChanged("id_services");
					this.Onid_servicesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="BigInt NOT NULL")]
		public long price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DetailBillExport_Stall", Storage="_DetailBillExport", ThisKey="id_services", OtherKey="id", IsForeignKey=true)]
		public DetailBillExport DetailBillExport
		{
			get
			{
				return this._DetailBillExport.Entity;
			}
			set
			{
				DetailBillExport previousValue = this._DetailBillExport.Entity;
				if (((previousValue != value) 
							|| (this._DetailBillExport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DetailBillExport.Entity = null;
						previousValue.Stalls.Remove(this);
					}
					this._DetailBillExport.Entity = value;
					if ((value != null))
					{
						value.Stalls.Add(this);
						this._id_services = value.id;
					}
					else
					{
						this._id_services = default(int);
					}
					this.SendPropertyChanged("DetailBillExport");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Stall", Storage="_Product", ThisKey="id_services", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Stalls.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Stalls.Add(this);
						this._id_services = value.id;
					}
					else
					{
						this._id_services = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Stall", Storage="_Service", ThisKey="id_services", OtherKey="id", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Stalls.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Stalls.Add(this);
						this._id_services = value.id;
					}
					else
					{
						this._id_services = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Storage")]
	public partial class Storage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_product;
		
		private int _amount;
		
		private long _price;
		
		private System.Nullable<int> _minAmount;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_productChanging(int value);
    partial void Onid_productChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    partial void OnpriceChanging(long value);
    partial void OnpriceChanged();
    partial void OnminAmountChanging(System.Nullable<int> value);
    partial void OnminAmountChanged();
    #endregion
		
		public Storage()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_product", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_product
		{
			get
			{
				return this._id_product;
			}
			set
			{
				if ((this._id_product != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_productChanging(value);
					this.SendPropertyChanging();
					this._id_product = value;
					this.SendPropertyChanged("id_product");
					this.Onid_productChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="BigInt NOT NULL")]
		public long price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minAmount", DbType="Int")]
		public System.Nullable<int> minAmount
		{
			get
			{
				return this._minAmount;
			}
			set
			{
				if ((this._minAmount != value))
				{
					this.OnminAmountChanging(value);
					this.SendPropertyChanging();
					this._minAmount = value;
					this.SendPropertyChanged("minAmount");
					this.OnminAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Storage", Storage="_Product", ThisKey="id_product", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Storage = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Storage = this;
						this._id_product = value.id;
					}
					else
					{
						this._id_product = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
